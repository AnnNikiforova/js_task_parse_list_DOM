{"mappings":"ACEA,IAAM,EAAe,SAAS,aAAa,CAAC,MAEtC,EAAc,SAAC,CAArB,EAAgC,OAAA,OAAO,EAAO,OAAO,CAAC,QAAS,I,EActD,MAAM,IAAI,CAAC,AAQP,EARY,QAAQ,EAAE,GAAG,CAAC,SAAC,CAAtC,EAAgD,MAAA,CAC9C,KAAM,EAAK,WAAW,CAAC,IAAI,GAC3B,SAAU,EAAK,OAAO,CAAC,QAAQ,CAC/B,OAAQ,EAAY,EAAK,OAAO,CAAC,MAAM,EACvC,IAAK,SAAS,EAAK,OAAO,CAAC,GAAG,CAAE,GAClC,C,GAIF,AArBA,SAAkB,CAAI,EAQpB,AAPoB,MAAM,IAAI,CAAC,EAAK,QAAQ,EAAE,IAAI,CAAC,SAAC,CAAA,CAAG,CAAvD,EACE,IAAM,EAAU,EAAY,EAAE,OAAO,CAAC,MAAM,EAG5C,OAAO,AAFS,EAAY,EAAE,OAAO,CAAC,MAAM,EAE3B,CACnB,GAEY,OAAO,CAAC,SAAC,CAArB,EAA8B,OAAA,EAAK,WAAW,CAAC,E,EACjD,EAYS","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar employeeList = document.querySelector(\"ul\");\nvar parseSalary = function(salary) {\n    return Number(salary.replace(/[$,]/g, \"\"));\n};\nfunction sortList(list) {\n    var sortedItems = Array.from(list.children).sort(function(a, b) {\n        var salaryA = parseSalary(a.dataset.salary);\n        var salaryB = parseSalary(b.dataset.salary);\n        return salaryB - salaryA;\n    });\n    sortedItems.forEach(function(item) {\n        return list.appendChild(item);\n    });\n}\nfunction getEmployees(list) {\n    return Array.from(list.children).map(function(item) {\n        return {\n            name: item.textContent.trim(),\n            position: item.dataset.position,\n            salary: parseSalary(item.dataset.salary),\n            age: parseInt(item.dataset.age, 10)\n        };\n    });\n}\ngetEmployees(employeeList);\nsortList(employeeList);\n\n//# sourceMappingURL=index.1cf1127b.js.map\n","'use strict';\n\nconst employeeList = document.querySelector('ul');\n\nconst parseSalary = (salary) => Number(salary.replace(/[$,]/g, ''));\n\nfunction sortList(list) {\n  const sortedItems = Array.from(list.children).sort((a, b) => {\n    const salaryA = parseSalary(a.dataset.salary);\n    const salaryB = parseSalary(b.dataset.salary);\n\n    return salaryB - salaryA;\n  });\n\n  sortedItems.forEach((item) => list.appendChild(item));\n}\n\nfunction getEmployees(list) {\n  return Array.from(list.children).map((item) => ({\n    name: item.textContent.trim(),\n    position: item.dataset.position,\n    salary: parseSalary(item.dataset.salary),\n    age: parseInt(item.dataset.age, 10),\n  }));\n}\n\ngetEmployees(employeeList);\nsortList(employeeList);\n"],"names":["employeeList","document","querySelector","parseSalary","salary","Number","replace","Array","from","list","children","map","item","name","textContent","trim","position","dataset","age","parseInt","sortList","sortedItems","sort","a","b","salaryA","salaryB","forEach","appendChild"],"version":3,"file":"index.1cf1127b.js.map"}